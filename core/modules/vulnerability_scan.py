import subprocess
import json
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from .base import BaseModule

class VulnerabilityScanModule(BaseModule):
    def __init__(self, framework):
        super().__init__(framework)
        self.tools = {
            'nuclei': self._run_nuclei,
            'wpscan': self._run_wpscan,
            'nikto': self._run_nikto,
            'sqlmap': self._run_sqlmap,
            'dalfox': self._run_dalfox,
            'ghauri': self._run_ghauri,
            'metasploit': self._run_metasploit,
            'kxss': self._run_kxss,
            'crlfuzz': self._run_crlfuzz
        }

    def run(self):
        """Execute vulnerability scanning tools"""
        self.logger.info("Starting vulnerability scanning phase...")
        results = {}
        
        # Get live web targets
        targets = self._get_live_targets()
        
        with ThreadPoolExecutor(max_workers=self.config['tools']['threads']) as executor:
            future_to_tool = {
                executor.submit(tool_func, targets): tool_name
                for tool_name, tool_func in self.tools.items()
            }
            
            for future in as_completed(future_to_tool):
                tool_name = future_to_tool[future]
                try:
                    results[tool_name] = future.result()
                except Exception as e:
                    self.logger.error(f"Error running {tool_name}: {str(e)}")
                    results[tool_name] = {'error': str(e)}
        
        self._save_results(results)
        return results

    def _run_nuclei(self, targets):
        """Run nuclei scanner"""
        try:
            input_file = os.path.join(self.framework.output_dir, 'nuclei_targets.txt')
            output_file = os.path.join(self.framework.output_dir, 'nuclei_results.json')
            
            with open(input_file, 'w') as f:
                f.write('\n'.join(targets))
            
            cmd = [
                'nuclei',
                '-l', input_file,
                '-json',
                '-o', output_file,
                '-severity', 'low,medium,high,critical',
                '-rate-limit', '150'
            ]
            
            subprocess.run(cmd, check=True)
            
            with open(output_file) as f:
                return [json.loads(line) for line in f if line.strip()]
        except subprocess.CalledProcessError as e:
            raise Exception(f"Nuclei error: {e.stderr}")

    def _run_sqlmap(self, targets):
        """Run sqlmap scanner"""
        results = {}
        for target in targets:
            try:
                output_dir = os.path.join(self.framework.output_dir, 'sqlmap', target.replace('://', '_'))
                cmd = [
                    'sqlmap',
                    '-u', target,
                    '--batch',
                    '--random-agent',
                    '--output-dir', output_dir,
                    '--json-output'
                ]
                
                subprocess.run(cmd, check=True)
                
                # Read results
                result_file = os.path.join(output_dir, 'scan_results.json')
                if os.path.exists(result_file):
                    with open(result_file) as f:
                        results[target] = json.load(f)
            except subprocess.CalledProcessError as e:
                results[target] = {'error': str(e)}
        
        return results

    def _run_dalfox(self, targets):
        """Run dalfox XSS scanner"""
        try:
            input_file = os.path.join(self.framework.output_dir, 'dalfox_targets.txt')
            output_file = os.path.join(self.framework.output_dir, 'dalfox_results.json')
            
            with open(input_file, 'w') as f:
                f.write('\n'.join(targets))
            
            cmd = [
                'dalfox', 'file',
                input_file,
                '--json-output', output_file,
                '--skip-bav',
                '--skip-mining-all',
                '--skip-mining-dict',
                '--skip-mining-params'
            ]
            
            subprocess.run(cmd, check=True)
            
            with open(output_file) as f:
                return json.load(f)
        except subprocess.CalledProcessError as e:
            raise Exception(f"Dalfox error: {e.stderr}")

    # ... Other vulnerability scanning tool implementations ... 